(in-microtheory TaskGlobalMt)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Rules

;; Happens after transitivity.
(<== (happensAfter ?z ?x)
    (happensAfter ?y ?x)
    (happensAfter ?z ?y))
    
;; Rule defining where a person currently is.
;; This considers the case only one micro-theory talks has movesTo.
;;
;; NOTE: 
;; the following is equivalent to:
;;     (thereExistExactly 1 ?microtheory (ist-Information ?microtheory (MovesTo ?person ?anyPlace)))
;;
;; but apparently companions can't handle "thereExist" clauses.
;;
(<== (isCurrentlyIn ?person ?place)
    (ist-Information ?microtheory (MovesTo ?person ?place))
    (evaluate 1
        ;; Count the number of micro-theories that has the movesTo actions.
        (CardinalityFn
            (TheClosedRetrievalSetOf ?anyMicrotheory
                (ist-Information ?anyMicrotheory (MovesTo ?person ?anyPlace))))))

;; Rule defining where a person currently is.
;; This considers the case more than one micro-theory has movesTo action.
;; More than one movesTo exists, gets the place associated with the
;; latest event micro-theory.
;;
(<== (isCurrentlyIn ?person ?place)
    (genlMt ?microtheory1 TaskLocalMt)
    (ist-Information ?microtheory1 (MovesTo ?person ?place))
    (evaluate 0
        ;; Count the number of micro-theories that happens after ?microtheory1.
        (CardinalityFn
            (TheClosedRetrievalSetOf ?microtheory2
                (and (genlMt ?microtheory2 TaskLocalMt)
                     (ist-Information ?microtheory2 (MovesTo ?person ?anotherPlace))
                     (happensAfter ?microtheory2 ?microtheory1) )))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Logic Rules

;; Implement Prolog's negation by failure.
(<== (not ?fact)
     (uninferredSentence ?fact))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; End of Code