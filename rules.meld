(in-microtheory TaskGlobalMt)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Event Rules

;; Happens after transitivity.
(<== (happensAfter ?z ?x)
    (happensAfter ?y ?x)
    (happensAfter ?z ?y))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Person Rules
    
;; Rule defining where a person currently is.
;; This considers the case only one micro-theory talks has movesTo.
;;
;; NOTE: 
;; the following is equivalent to:
;;     (thereExistExactly 1 ?microtheory (ist-Information ?microtheory (MovesTo ?person ?anyPlace)))
;;
;; but apparently companions can't handle "thereExist" clauses.
;;
(<== (isCurrentlyIn ?person ?place)
    (ist-Information ?microtheory (MovesTo ?person ?place))
    (evaluate 1
        ;; Count the number of micro-theories that has the movesTo actions.
        (CardinalityFn
            (TheClosedRetrievalSetOf ?anyMicrotheory
                (ist-Information ?anyMicrotheory (MovesTo ?person ?anyPlace))))))

;; Rule defining where a person currently is.
;; This considers the case more than one micro-theory has movesTo action.
;; More than one movesTo exists, gets the place associated with the
;; latest event micro-theory.
;;
(<== (isCurrentlyIn ?person ?place)
    (genlMt ?microtheory1 TaskLocalMt)
    (ist-Information ?microtheory1 (MovesTo ?person ?place))
    (evaluate 0
        ;; Count the number of micro-theories that happens after ?microtheory1.
        (CardinalityFn
            (TheClosedRetrievalSetOf ?microtheory2
                (and (genlMt ?microtheory2 TaskLocalMt)
                     (ist-Information ?microtheory2 (MovesTo ?person ?anotherPlace))
                     (happensAfter ?microtheory2 ?microtheory1) )))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Person and Object Rules

;; First case, person picked up the object and and didn't drop or gave it.                     
(<== (isHoldingObject ?person ?object)
    (ist-Information ?microtheory1 (pickedUpObject ?person ?object))
    (evaluate 0
        ;; Count the number of micro-theories that happens after ?microtheory1 that the person dropped the object.
        (CardinalityFn
            (TheClosedRetrievalSetOf ?microtheory2
                (and (genlMt ?microtheory2 TaskLocalMt)
                     (ist-Information ?microtheory2 (droppedObject ?person ?object))
                     (happensAfter ?microtheory2 ?microtheory1)))))
    (evaluate 0
        ;; Count the number of micro-theories that happens after ?microtheory1 that the person gave the object
        ;; to another person.
        (CardinalityFn
            (TheClosedRetrievalSetOf ?microtheory2
                (and (genlMt ?microtheory2 TaskLocalMt)
                     (ist-Information ?microtheory2 (giveTo ?person ?anotherPerson ?object))
                     (happensAfter ?microtheory2 ?microtheory1))))))

;; Second case, person was given the object and and didn't drop or gave it.
(<== (isHoldingObject ?person ?object)
    (ist-Information ?microtheory1 (giveTo ?anyPerson ?person ?object))
    (evaluate 0
        ;; Count the number of micro-theories that happens after ?microtheory1 that the person dropped the object.
        (CardinalityFn
            (TheClosedRetrievalSetOf ?microtheory2
                (and (genlMt ?microtheory2 TaskLocalMt)
                     (ist-Information ?microtheory2 (droppedObject ?person ?object))
                     (happensAfter ?microtheory2 ?microtheory1)))))
    (evaluate 0
        ;; Count the number of micro-theories that happens after ?microtheory1 that the person gave the object
        ;; to another person.
        (CardinalityFn
            (TheClosedRetrievalSetOf ?microtheory2
                (and (genlMt ?microtheory2 TaskLocalMt)
                     (ist-Information ?microtheory2 (giveTo ?person ?anotherPerson ?object))
                     (happensAfter ?microtheory2 ?microtheory1))))))
                     
                     
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Object Rules                

;; First case, someone is currently holding the object
(<== (isObjectCurrentlyIn ?object ?place)
    (isHoldingObject ?person ?object)
    (isCurrentlyIn ?person ?place))

;; Second case, nobody is holding the object, find the place someone dropped it for the last time.                      
(<== (isObjectCurrentlyIn ?object ?place)
    (ist-Information ?microtheory1 (droppedObject ?person ?object))
    (ist-Information ?microtheory2 (MovesTo ?person ?place))
    (happensAfter ?microtheory1 ?microtheory2)                     
    (evaluate 0
        ;; Count the number of people currently holding object.
        (CardinalityFn
            (TheClosedRetrievalSetOf ?anyPerson
                (isHoldingObject ?anyPerson ?object))))
    (evaluate 0
        ;; Count the number of micro-theories that happens after ?microtheory1 where
        ;; the same person dropped the object.
        (CardinalityFn
            (TheClosedRetrievalSetOf ?microtheory3
                (and (genlMt ?microtheory3 TaskLocalMt)
                     (ist-Information ?microtheory3 (droppedObject ?person ?object))
                     (happensAfter ?microtheory3 ?microtheory1)))))
    (evaluate 0
        ;; Count the number of micro-theories that happens after ?microtheory1 where
        ;; another person dropped the object.
        (CardinalityFn
            (TheClosedRetrievalSetOf ?microtheory3
                (and (genlMt ?microtheory3 TaskLocalMt)
                     (ist-Information ?microtheory3 (droppedObject ?anotherPerson ?object))
                     (happensAfter ?microtheory3 ?microtheory1)))))
    (evaluate 0
        ;; Count the number of micro-theories that happens after ?microtheory2 and before
        ;; ?microtheory1 and a person moved to another place.
        (CardinalityFn
            (TheClosedRetrievalSetOf ?microtheory3
                (and (genlMt ?microtheory3 TaskLocalMt)
                     (ist-Information ?microtheory3 (MovesTo ?person ?anotherPlace))
                     (happensAfter ?microtheory3 ?microtheory2)
                     (happensAfter ?microtheory1 ?microtheory3)))))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Directions Rules

;; symmetrical relations
(<== (northOf ?x ?y)
    (southOf ?y ?x))
    
(<== (southOf ?x ?y)
    (northOf ?y ?x))

(<== (westOf ?x ?y)
    (eastOf ?y ?x))

(<== (eastOf ?x ?y)
    (westOf ?y ?x))
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Logic Rules

;; Implement Prolog's negation by failure.
(<== (not ?fact)
     (uninferredSentence ?fact))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; End of Code